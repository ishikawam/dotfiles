# common shell


##################################################
# path

# Android SDK
if [ -d /Applications/android-sdk-mac_x86/platform-tools ]; then
    PATH=$PATH:/Applications/android-sdk-mac_x86/platform-tools
    PATH=$PATH:~/android-sdks/platform-tools
fi

if [ -d /Applications/android-sdk-mac_x86/tools ]; then
    PATH=$PATH:/Applications/android-sdk-mac_x86/tools
    PATH=$PATH:~/android-sdks/tools
fi

# 個人bin
PATH=~/bin:$PATH
# this 個別設定
PATH=~/this/bin:$PATH

# sbin
PATH=$PATH:/sbin:/usr/sbin

# homebrewを優先。gitとか
PATH=/usr/local/bin:/usr/local/sbin:$PATH

# ~/local/bin/, ~/opt/bin/ に入れた個人使用のツール(optに統一したい
PATH=~/local/bin:$PATH
PATH=~/opt/bin:$PATH

LD_LIBRARY_PATH=~/local/lib:$LD_LIBRARY_PATH
LD_LIBRARY_PATH=~/opt/lib:$LD_LIBRARY_PATH

# Terminalの色数
TERM=xterm-256color

# Mac標準のBSD版sedはイケてないのでgnu版に替える
if [ -d /usr/local/opt/gnu-sed/ ]; then
    PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
    MANPATH="/usr/local/opt/gnu-sed/libexec/gnuman:$MANPATH"
fi

# dockerの設定
DOCKER_HOST=tcp://localhost:4243

# go
if [ -d ~/go ]; then
    export GOPATH=~/go
    PATH=$PATH:$GOPATH/bin
fi

# for mosh, tmux
if [ `uname` = "Darwin" ]; then
    # Mountain Lionの "dyld: DYLD_ environment variables being ignored because main executable (/usr/bin/sudo) is setuid or setgid" 問題対応
    unset LD_LIBRARY_PATH
    unset DYLD_LIBRARY_PATH
else
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
fi

##################################################
# aliases

alias grep="grep --color --binary-files=without-match --exclude-dir='.svn' --exclude-dir='.git' --exclude='*.png' --exclude='*.jpg' --exclude='*.gif' --exclude='*.ico' --exclude-dir='tmp' "
alias ggrep="grep --exclude-dir='htdocs' --exclude-dir='htdocs_*' --exclude-dir='log' --exclude-dir='log_*' --exclude='*.json' --exclude-dir='node_modules' --exclude-dir='vendor' --exclude-dir='storage' --exclude='*.css.map' --exclude='*.min.css' "

# Macと場合分け。lsが異なるので。
case "$OSTYPE" in
    darwin*)
        alias ls="LSCOLORS=gxfxxxxxcxxxxxxxxxxxxx ls -G"
# zshのみなので一旦コメントアウト
#        alias -s html='open -a Google\ Chrome'
#        alias -s {png,jpg,bmp,PNG,JPG,pdf}='open -a Preview'
        alias ll='ls -lahF'
        ;;
    linux*)
        alias ls="ls --color=auto"
        alias ll='ls -lahF --color=auto'
        ;;
    freebsd*)
        alias ls="LSCOLORS=gxfxxxxxcxxxxxxxxxxxxx ls -G"
        alias ll='ls -lahF'
        # zshにメールチェックをさせない
        export MAILCHECK=0
        # --exclude-dir使えないので
        alias grep="grep --color --binary-files=without-match --exclude='.svn' --exclude='.git' --exclude='*.png' --exclude='*.jpg' --exclude='*.gif' --exclude='*.ico' --exclude='tmp' "
        alias ggrep="grep --exclude='htdocs' --exclude='htdocs_*' --exclude='log' --exclude='log_*' --exclude='*.json' --exclude='node_modules' --exclude='vendor' --exclude='storage' --exclude='*.css.map' --exclude='*.min.css' "
        ;;
esac

alias rm='rm -i'
alias cp='cp -iv'
alias mv='mv -iv'

alias findname='find . -name $*'
function findgrep() { find . -type f -name "$1" -exec grep -lHn "$2" {} \;; }
function findrm() { find . -type f -name "$1" -exec rm -f "$2" {} \;; }
function findsed() { find . -type f -name "$1" -exec sed -e "$2" {} \;; }
function findsedexec() { find . -type f -name "$1" -exec sed -i -e "$2" {} \;; }

alias -- .='pwd -P'
alias -- ..='cd ..'
alias -- ...='cd ../..'
alias -- -='cd -'

alias scl='screen -ls'
alias scr='screen -xR'

# オレが考えた最強locate
function loc() { locate "$1" | grep -o ".*$1[^/]*" | sort | uniq ; }
function loci() { locate -i "$1" | grep -oi ".*$1[^/]*" | sort | uniq ; }


# emacs daemonを使用
alias e='emacsclient -nw -a ""'
alias em='emacs -q -l ~/.emacs.d/.emacs_min'
alias e-kill='emacsclient -e "(kill-emacs)"'

alias mysql_delete_danger_history='sed -i -e "/\(drop\|DROP\) /D" ~/.mysql_history'

##################################################
# python

if [ -x "`which pyenv 2>/dev/null`" ]; then
    # pyenvが存在したら
    export PYENV_ROOT="${HOME}/.pyenv"
    if [ -n ${PYENV_ROOT} ]; then
        PATH="${PYENV_ROOT}/bin:${PYENV_ROOT}/shims:$PATH"
        # path=(${PYENV_ROOT}/bin ${PYENV_ROOT}/shims ${path})
    fi
    eval "$(pyenv init -)"
fi

##################################################
# ruby

if [ -x "`which rbenv 2>/dev/null`" ]; then
    # rbenvが存在したら
    PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init -)"
fi

##################################################
# node

# nvmでnodeのバージョン決定
# この運用は今後やめていきたい。＞nvm alias default v0.10.38 とか nvm alias default stable とかを実行すればバージョンが永久固定されるので
if [ -f ~/.nvm/nvm.sh -a ! -x "`which node 2>/dev/null`" ]; then
    # homebrew等で既にnode入れている場合はnvmは使用しない
    source ~/.nvm/nvm.sh

    if [ ! -x "`which node 2>/dev/null`" ]; then
        # nvmでもinstallされていなければスルー
        :
    elif [ $(hostname) = "wind.windserver.jp" ]; then
        nvm use v0.10.24 > /dev/null
    elif [ $(hostname) = "fire" ]; then
        # fireでnodeのサービス動いているので合わせる。サービスは /etc/rc.d/rc.local
        nvm use default
    else
        :
#        nvm use default
    fi

    npm_dir=${NVM_PATH}_modules
    NODE_PATH=$npm_dir
fi

#  カレントディレクトリからローカルに入れられたモジュールbinを実行。グローバル、ユーザーのローカル、よりも優先する
PATH=./node_modules/.bin:$PATH


# npmgls, npmgls
alias npmls='npm ls | grep -v "^ \|│" | sed -e "s/^.* //g"'
alias npmgls='npm ls -g | grep -v "^ \|│" | sed -e "s/^.* //g"'

##################################################
# php composer
PATH=~/.composer/vendor/bin:$PATH

##################################################
# xcode

# Xcode821.app とか複数バージョン入れている場合にはそのなかで最新のを見に行く
xcode=`ls /Applications/ 2>/dev/null | grep "Xcode[0-9]" | tail -1`
if [ -n "$xcode" ]; then
    export DEVELOPER_DIR=/Applications/$xcode/Contents/Developer
elif [ -d /Applications/Xcode.app ]; then
    export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer
fi


##################################################
# lang

# 言語、デフォルトはUTF-8
export LANG=ja_JP.UTF-8
export LC_ALL=ja_JP.UTF-8 2>/dev/null
alias chlang-utf8='export LANG=ja_JP.UTF-8'
alias chlang-eucjp='export LANG=ja_JP.EUC-JP'

# euc判定
if [ -f ~/this/.eucjp ]; then
    export LANG=ja_JP.EUC-JP
fi


##################################################

# crontab editor is emacs
export EDITOR=/usr/bin/emacs

# tmux show git branch 効いてない
PS1="$PS1"$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")

# ignore ssl certificate when using git
export GIT_SSL_NO_VERIFY=true


##################################################
# ansible
export ANSIBLE_COW_SELECTION=random


##################################################
# login check
watch=(notme)
LOGCHECK=10
WATCHFMT="%(a:${fg[blue]}Hello %n [%m] [%t]:${fg[red]}Bye %n [%m] [%t])"


##################################################
# private shell

if [ -f ~/private/.shrc ]; then
    source ~/private/.shrc
fi

if [ -f ~/this/.shrc ]; then
    source ~/this/.shrc
fi

ssh-add

# tmuxでssh-agentが切れる問題対処
agent="$HOME/.ssh/agent"
if [ -S "$SSH_AUTH_SOCK" ]; then
    case $SSH_AUTH_SOCK in
    /tmp/*/agent.[0-9]*)
        ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
    esac
elif [ -S $agent ]; then
    export SSH_AUTH_SOCK=$agent
else
    echo "no ssh-agent"
fi

##################################################
# 最後にPATHを永続化

export PATH
export LD_LIBRARY_PATH
